package fr.insa.soa.missionManagementMS.DataObjectAccess;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;


import fr.insa.soa.missionManagementMS.Database.DatabaseConnection;
import fr.insa.soa.missionManagementMS.model.Mission;



public class MissionDAO{


    /** Adds a mission to the database, with a persistent connection
     * The id of the created mission is directly generated by query execution
     *
     * @return the created mission object
     */
    public Mission createMission(Mission mission) throws SQLException {
        String sql = "INSERT INTO missions (name, description, person_in_need_id, statut) VALUES (?, ?, ?, ?)";

        // Use a persistent connection to execute the query
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            statement.setString(1, mission.getName()); // Set the name parameter
            statement.setString(2, mission.getDescription()); // Set the description parameter
            statement.setInt(3, mission.getPersonInNeedId()); // Set the person in need id parameter
            statement.setInt(4, 0); // Set the status (0 for "pending")

            int rows = statement.executeUpdate();  // Execute the INSERT query
            if (rows > 0) { // If rows were affected, retrieve the generated primary key
                ResultSet generatedKeys = statement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    mission.setMissionId(generatedKeys.getInt(1)); // Set the generated mission ID
                }
            }
            return mission; // Return the updated mission object
        }
    }

    /** Get all missions from the database, with a persistent connection
     *
     * @return a list of all retrieved missions
     */
    public static List<Mission> getAllMissions() throws SQLException {
        List<Mission> missions = new ArrayList<>(); // Create an empty list to hold missions
        String sql = "SELECT * FROM missions";

        // Use a persistent connection to execute the query
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                // Iterate through each row in the result set
                Mission mission = new Mission();
                // Populate mission fields
                mission.setMissionId(resultSet.getInt("mission_id"));
                mission.setName(resultSet.getString("name"));
                mission.setDescription(resultSet.getString("description"));
                mission.setPersonInNeedId(resultSet.getInt("person_in_need_id"));
                mission.setStatus(resultSet.getInt("statut"));
                mission.setHelperId(resultSet.getInt("helper_id"));
                missions.add(mission);
            }
        }
        return missions; // Return the list of missions
    }

    /** Update status for a mission that has been declined or accepted, through the database, with a persistent connection
     *
     * @return boolean of missions correctly updated
     */
    public boolean updateMissionStatus(int missionId, int statut) throws SQLException {
        String sql = "UPDATE missions SET statut = ? WHERE mission_id = ?";

        // Use a persistent connection to execute the query
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, statut);     // Set the new status
            statement.setInt(2, missionId);  // Set the mission ID to update

            int rows = statement.executeUpdate();         // Execute the UPDATE query
            return rows > 0; // Return true if rows were updated
        }
    }

    /** Delete mission from the database, with a persistent connection
     *
     * @return boolean of rows correctly deleted
     */
    public boolean deleteMission(int missionId) throws SQLException {
        String sql = "DELETE FROM missions WHERE mission_id = ?";

        // Use a persistent connection to execute the query
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, missionId); // Set the mission ID to delete
            int rows = statement.executeUpdate();        // Execute the DELETE query
            return rows > 0;                             // Return true if rows were deleted
        }
    }
}
